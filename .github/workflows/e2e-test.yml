# SPDX-License-Identifier: Apache-2.0

name: E2E test

on:
  workflow_dispatch:
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/e2e.yml'
      - 'scripts/basic-workflow-tests.sh'
      - 'scripts/test-data/*'

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-08005652b282676ac
          ec2-instance-type: g4dn.xlarge
          subnet-id: subnet-c8db48e9
          security-group-id: sg-0cb244bcab1df59cc
          #          iam-role-name:
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "brent-ilab-ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]

  e2e:
    name: E2E Test
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Verify runner
        run: cat README.md

      - name: Free Disk Space
        run: |
          df -h
          sudo docker rmi "$(docker image ls -aq)" >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          df -h
        shell: bash

      - name: Setup Python 3.11
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: 3.11
          cache: pip
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
        continue-on-error: true

      - name: Install Packages
        run: |
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get install -y cuda-toolkit git cmake build-essential virtualenv
          nvidia-smi
          sudo ls -l /dev/nvidia*

      - name: Remove llama-cpp-python from cache
        run: |
          pip cache remove llama_cpp_python

#      - name: Cache huggingface
#        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
#        with:
#          path: ~/.cache/huggingface
#          # config contains DEFAULT_MODEL
#          key: huggingface-${{ hashFiles('src/instructlab/configuration.py') }}

      - name: Install ilab
        run: |
          export PATH="/home/runner/.local/bin:/usr/local/cuda/bin:$PATH"
          python3 -m venv venv
          . venv/bin/activate
          sed 's/\[.*\]//' requirements.txt > constraints.txt
          python3 -m pip cache remove llama_cpp_python
          CMAKE_ARGS="-DLLAMA_CUBLAS=on" python3 -m pip install --no-binary llama_cpp_python -c constraints.txt llama_cpp_python
          # needed for --4-bit-quant option to ilab model train
          python3 -m pip install bitsandbytes
          python3 -m pip install .

      - name: Run e2e test
        run: |
          . venv/bin/activate
          ./scripts/basic-workflow-tests.sh -cm

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner
      - e2e
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Sleep before termination
        run: sleep 300  # Sleep for 5 minutes
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

#
#name: E2E test
#
#on:
#  workflow_dispatch:
#    paths:
#      - '**.py'
#      - 'pyproject.toml'
#      - 'requirements*.txt'
#      - '.github/workflows/e2e.yml'
#      - 'scripts/basic-workflow-tests.sh'
#      - 'scripts/test-data/*'
##      pr_or_branch:
##        description: 'pull request number or branch name'
##        required: true
##        default: 'main'
#
##  push:
##    branches:
##      - "main"
##      - "release-**"
#
##  pull_request:
##    branches:
##      - "main"
##      - "release-**"
##    paths:
##      - '**.py'
##      - 'pyproject.toml'
##      - 'requirements*.txt'
##      - '.github/workflows/e2e.yml'
##      - 'scripts/basic-workflow-tests.sh'
##      - 'scripts/test-data/*'
#
#jobs:
#  start-runner:
#    name: Start self-hosted EC2 runner
#    runs-on: ubuntu-latest
#    outputs:
#      label: ${{ steps.start-ec2-runner.outputs.label }}
#      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: Start EC2 runner
#        id: start-ec2-runner
#        uses: machulav/ec2-github-runner@v2
#        with:
#          mode: start
#          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#          ec2-image-id: ami-08005652b282676ac
#          ec2-instance-type: t3.nano  # Update with your desired instance type
#          subnet-id: subnet-123  # Update with your VPC Subnet ID
#          security-group-id: sg-123  # Update with your security group ID
#          iam-role-name: my-role-name  # Optional, update if needed
#          aws-resource-tags: >  # Optional, update if needed
#            [
#              {"Key": "Name", "Value": "ec2-github-runner"},
#              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
#            ]
#
#  e2e:
#    name: E2E Test
#    needs: start-runner
#    runs-on: ${{ needs.start-runner.outputs.label }}
#
#    permissions:
#      pull-requests: write
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
#        with:
#          fetch-depth: 0
#
#      - name: Determine if pr_or_branch is a PR number
#        id: check_pr
#        run: |
#          if [[ "${{ github.event.inputs.pr_or_branch }}" =~ ^[0-9]+$ ]]; then
#            echo "is_pr=true" >> "$GITHUB_OUTPUT"
#          else
#            echo "is_pr=false" >> "$GITHUB_OUTPUT"
#          fi
#
#      - name: Check if gh CLI is installed
#        id: gh_cli
#        run: |
#          if command -v gh &> /dev/null ; then
#            echo "gh_cli_installed=true" >> "$GITHUB_OUTPUT"
#          else
#            echo "gh_cli_installed=false" >> "$GITHUB_OUTPUT"
#          fi
#
#      - name: Configure gh CLI APT repository
#        if: steps.gh_cli.outputs.gh_cli_installed == 'false'
#        run: |
#          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y))
#          sudo mkdir -p -m 755 /etc/apt/keyrings
#          wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
#          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
#          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
#          sudo apt update
#
#      - name: Install gh CLI
#        if: steps.gh_cli.outputs.gh_cli_installed == 'false'
#        run: |
#          sudo apt install gh -y
#
#      - name: test gh CLI
#        run: |
#          gh --version
#
#      - name: set default repo
#        run: |
#          gh repo set-default ${{ github.server_url }}/${{ github.repository }}
#        env:
#          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#
#      - name: Add comment to PR
#        if: steps.check_pr.outputs.is_pr == 'true'
#        run: |
#          gh pr comment "${{ github.event.inputs.pr_or_branch }}" -b "e2e workflow launched on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
#        env:
#          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#
#      - name: Fetch and checkout PR
#        if: steps.check_pr.outputs.is_pr == 'true'
#        run: |
#          gh pr checkout ${{ github.event.inputs.pr_or_branch }}
#        env:
#          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#
#      - name: Checkout branch
#        if: steps.check_pr.outputs.is_pr == 'false'
#        run: |
#          git checkout ${{ github.event.inputs.pr_or_branch }}
#
#      - name: Install Packages
#        run: |
#          sudo apt-get install -y cuda-toolkit git cmake build-essential virtualenv
#          nvidia-smi
#          sudo ls -l /dev/nvidia*
#
#      - name: Setup Python 3.11
#        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
#        with:
#          python-version: 3.11
#          cache: pip
#          cache-dependency-path: |
#            **/pyproject.toml
#            **/requirements*.txt
#
#      - name: Remove llama-cpp-python from cache
#        run: |
#          pip cache remove llama_cpp_python
#
#      - name: Cache huggingface
#        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
#        with:
#          path: ~/.cache/huggingface
#          key: huggingface-${{ hashFiles('src/instructlab/configuration.py') }}
#
#      - name: Install ilab
#        run: |
#          export PATH="/home/runner/.local/bin:/usr/local/cuda/bin:$PATH"
#          python3 -m venv venv
#          . venv/bin/activate
#          sed 's/\[.*\]//' requirements.txt > constraints.txt
#          python3 -m pip cache remove llama_cpp_python
#          CMAKE_ARGS="-DLLAMA_CUBLAS=on" python3 -m pip install --no-binary llama_cpp_python -c constraints.txt llama_cpp_python
#          python3 -m pip install bitsandbytes
#          python3 -m pip install .
#
#      - name: Run e2e test
#        run: |
#          . venv/bin/activate
#          ./scripts/basic-workflow-tests.sh -cm
#
#      - name: Remove llama-cpp-python from cache
#        if: always()
#        run: |
#          pip cache remove llama_cpp_python
#
#      - name: Add comment to PR if the workflow failed
#        if: failure() && steps.check_pr.outputs.is_pr == 'true'
#        run: |
#          gh pr comment "${{ github.event.inputs.pr_or_branch }}" -b "e2e workflow failed on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}), please investigate."
#        env:
#          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#
#      - name: Add comment to PR if the workflow succeeded
#        if: success() && steps.check_pr.outputs.is_pr == 'true'
#        run: |
#          gh pr comment "${{ github.event.inputs.pr_or_branch }}" -b "e2e workflow succeeded on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}), congrats!"
#        env:
#          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#
#  stop-runner:
#    name: Stop self-hosted EC2 runner
#    needs:
#      - start-runner
#      - e2e
#    runs-on: ubuntu-latest
#    if: ${{ always() }}
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: Stop EC2 runner
#        uses: machulav/ec2-github-runner@v2
#        with:
#          mode: stop
#          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#          label: ${{ needs.start-runner.outputs.label }}
#          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
